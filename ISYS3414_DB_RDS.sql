/* CREATE TABLE AND CONSTRAINTS FOR ADMIN ENTITY */
CREATE TABLE ADMIN_ENTITY (
  email VARCHAR(30) PRIMARY KEY NOT NULL,
  u_password VARCHAR(30) NOT NULL,
  u_role VARCHAR(10) NOT NULL CHECK (u_role IN ('Student', 'Teacher', 'Admin')),
  u_name VARCHAR(30) NOT NULL,
  FOREIGN KEY (email) REFERENCES USER_ENTITY(email) ON DELETE CASCADE
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* POPULATE DATA FOR ADMIN ENTITY */
INSERT INTO ADMIN VALUES (
  'admin@gmail.com',
  'pass123',
  'Admin',
  'Admin name'
);

INSERT INTO ADMIN VALUES (
  'admin1@gmail.com',
  'pass123',
  'Admin',
  'Admin name'
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE TABLE AND CONSTRAINTS FOR BOOK ENTITY */
CREATE TABLE BOOK_ENTITY (
  ID INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
  title VARCHAR(30) NOT NULL,
  author VARCHAR(30),
  b_category VARCHAR(30)  NOT NULL CHECK (b_category IN ('FICTION', 'NON-FICTION', 'MYSTERY', 'ROMANCE' 
  'THRILLER')),
  book_picture LONGBLOB,
  mimetype VARCHAR(50),
  filename VARCHAR(200),
  created_date DATE,
  b_status VARCHAR(30) NOT NULL DEFAULT 'Available',
  CONSTRAINT BOOK_ENTITY_CON CHECK (B_STATUS IN ('Available', 'Unavailable'))
);

ALTER TABLE BOOK_ENTITY ADD (
  CONSTRAINT BOOK_PK PRIMARY KEY (id)
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE TRIGGERS COVER INSERT - UPDATE - DELETE FOR BOOK ENTITY */
CREATE OR REPLACE TRIGGER BOOK_AFTER_INSERT
FOR INSERT ON BOOK_ENTITY
COMPOUND TRIGGER
    TYPE title_t IS TABLE OF STOCK_ENTITY.title%TYPE;
    title_array title_t := title_t();

    TYPE id_t IS TABLE OF BOOK_ENTITY.ID%TYPE;
    id_array id_t := id_t();
  
    AFTER EACH ROW IS BEGIN
        title_array.extend();
        title_array(title_array.count) := :NEW.title;

        id_array.extend();
        id_array(id_array.count) := :NEW.ID;

        IF :NEW.b_status = 'Available' THEN 
            INSERT INTO STOCK_ENTITY(book_ID, title, num_stock) 
            VALUES (:NEW.ID, :NEW.title, 0);
        END IF;
    END AFTER EACH ROW;

    AFTER STATEMENT IS BEGIN 
        FOR i IN 1..title_array.count LOOP
            UPDATE BOOK_ENTITY
            SET b_status = 'Available'
            WHERE ID = id_array(i);


            UPDATE STOCK_ENTITY
            SET num_stock = (SELECT COUNT(*) FROM BOOK_ENTITY WHERE title = title_array(i) AND b_status = 'Available')
            WHERE STOCK_ENTITY.title = title_array(i);

            DELETE FROM STOCK_ENTITY WHERE num_stock = 0;
   
        END LOOP;
    END AFTER STATEMENT;
END BOOK_AFTER_INSERT;
/

CREATE OR REPLACE TRIGGER BOOK_AFTER_DELETE
FOR DELETE ON BOOK_ENTITY
COMPOUND TRIGGER
    TYPE title_t IS TABLE OF STOCK_ENTITY.title%TYPE;
    title_array title_t := title_t();
  
    AFTER EACH ROW IS BEGIN
        title_array.extend();
        title_array(title_array.count) := :OLD.title;
    END AFTER EACH ROW;

    AFTER STATEMENT IS BEGIN 
        FOR i IN 1..title_array.count LOOP
            UPDATE STOCK_ENTITY 
            SET num_stock = (SELECT COUNT(*) FROM BOOK_ENTITY WHERE title = title_array(i) AND b_status = 'Available')
            WHERE title = title_array(i);

            DELETE FROM STOCK_ENTITY WHERE num_stock = 0;

        END LOOP;
    END AFTER STATEMENT;
END BOOK_AFTER_DELETE;
/

CREATE OR REPLACE TRIGGER BOOK_AFTER_UPDATE
FOR UPDATE ON BOOK_ENTITY
COMPOUND TRIGGER
    TYPE title_t IS TABLE OF STOCK_ENTITY.title%TYPE;
    title_array title_t := title_t();
    title_array_old title_t := title_t();

    TYPE b_status_t IS TABLE OF BOOK_ENTITY.b_status%TYPE;
    b_status_array b_status_t := b_status_t();

    TYPE id_t IS TABLE OF BOOK_ENTITY.ID%TYPE;
    id_array id_t := id_t();
    
    title_count INT := 0;

    AFTER EACH ROW IS BEGIN
        title_array.extend();
        title_array(title_array.count) := :NEW.title;

        title_array_old.extend();
        title_array_old(title_array_old.count) := :OLD.title;

        b_status_array.extend();
        b_status_array(b_status_array.count) := :NEW.b_status;

        id_array.extend();
        id_array(id_array.count) := :OLD.ID;

    END AFTER EACH ROW;

    AFTER STATEMENT IS BEGIN 
        FOR i IN 1..title_array.count LOOP
            SELECT COUNT(title) INTO title_count FROM BOOK_ENTITY WHERE title = title_array(i);

            IF title_array(i) != title_array_old(i) AND b_status_array(i) = 'Available' THEN 
                UPDATE STOCK_ENTITY 
                SET num_stock = num_stock - 1
                WHERE title = title_array_old(i);

                INSERT INTO STOCK_ENTITY(book_ID, title, num_stock) 
                VALUES (id_array(i), title_array(i), 1);
            ELSIF title_array(i) = title_array_old(i) AND b_status_array(i) = 'Available' THEN
                INSERT INTO STOCK_ENTITY(book_ID, title, num_stock) 
                VALUES (id_array(i), title_array_old(i), 1);
            END IF;

            UPDATE STOCK_ENTITY 
            SET num_stock = (SELECT COUNT(*) FROM BOOK_ENTITY WHERE title = title_array(i) AND b_status = 'Available')
            WHERE title = title_array(i);

            DELETE FROM STOCK_ENTITY WHERE num_stock = 0;
        END LOOP;
    END AFTER STATEMENT;
END BOOK_AFTER_UPDATE;
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* POPULATE DATA FOR BOOK ENTITY */
INSERT INTO BOOK 
VALUES (NULL, 'Book1', 'Author1', 'FICTION', NULL, NULL, NULL, NULL, 'Available');
INSERT INTO BOOK 
VALUES (NULL, 'Book2', 'Author2', 'NON-FICTION', NULL, NULL, NULL, NULL, 'Available');
INSERT INTO BOOK 
VALUES (NULL, 'Book3', 'Author3', 'MYSTERY', NULL, NULL, NULL, NULL, 'Available');
INSERT INTO BOOK 
VALUES (NULL, 'Book4', 'Author4', 'ROMANCE', NULL, NULL, NULL, NULL, 'Available');
INSERT INTO BOOK 
VALUES (NULL, 'Book1', 'Author1', 'ROMANCE', NULL, NULL, NULL, NULL, 'Available');
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE TABLE AND CONSTRAINTS FOR STOCK ENTITY */
CREATE TABLE STOCK_ENTITY (
  book_ID INT NOT NULL,
  title VARCHAR(30),
  num_stock INT CHECK (num_stock >= 0),
  FOREIGN KEY (book_ID) REFERENCES BOOK_ENTITY(ID) ON DELETE CASCADE
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* POPULATE DATA FOR STOCK ENTITY */
-- Our database prevent the insert statement into STOCK_ENTITY to maintenance the modify relation 
-- with book issue. Therefore, the book trigger is going to cover this insert statement for STOCK_ENTITY
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE TABLE AND CONSTRAINTS FOR STUDENT ENTITY */
CREATE TABLE STUDENT_ENTITY (
  email VARCHAR(30) PRIMARY KEY NOT NULL,
  u_password VARCHAR(30) NOT NULL,
  u_role VARCHAR(10) NOT NULL CHECK (u_role IN ('Student', 'Teacher', 'Admin')),
  u_name VARCHAR(30) NOT NULL,
  fine_rate DECIMAL(18, 2),
  total_days INT NOT NULL,
  book_limit INT NOT NULL DEFAULT 10,
  total_issued INT DEFAULT 0

  FOREIGN KEY (email) REFERENCES USER_ENTITY(email) ON DELETE CASCADE,
  CHECK ( total_days = 7),
  CHECK (fine_rate = 0.02)
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* POPULATE DATA FOR STUDENT ENTITY */
INSERT INTO STUDENT_ENTITY VALUES (
  'student@gmail.com', 'pass123', 'Student', 'Student name', 0.02, 7, 10, 0
);
INSERT INTO STUDENT_ENTITY VALUES (
  'student2@gmail.com', 'pass123', 'Student', 'Student name', 0.02, 7, 10, 0
);
INSERT INTO STUDENT_ENTITY VALUES (
  'student3@gmail.com', 'pass123', 'Student', 'Student name', 0.02, 7, 10, 0
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE TABLE AND CONSTRAINTS FOR TEACHER ENTITY */
CREATE TABLE TEACHER_ENTITY (
  email VARCHAR(30) PRIMARY KEY NOT NULL,
  u_password VARCHAR(30) NOT NULL,
  u_role VARCHAR(10) NOT NULL CHECK (u_role IN ('Student', 'Teacher', 'Admin')),
  u_name VARCHAR(30) NOT NULL,
  fine_rate DECIMAL(18, 2),
  total_days INT NOT NULL,
  book_limit INT NOT NULL DEFAULT 5,
  total_issued INT NOT NULL DEFAULT 0
  FOREIGN KEY (email) REFERENCES USER_ENTITY(email) ON DELETE CASCADE,
  CHECK ( total_days = 14),
  CHECK (fine_rate = 0.03)
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* POPULATE DATA FOR TEACHER ENTITY */
INSERT INTO TEACHER_ENTITY VALUES (
  'teacher@gmail.com', 'pass123', 'Teacher', 'teacher name', 0.03, 14, 5, 0
);
INSERT INTO TEACHER_ENTITY VALUES (
  'teacher2@gmail.com', 'pass123', 'Teacher', 'teacher name', 0.03, 14, 5, 0
);
INSERT INTO TEACHER_ENTITY VALUES (
  'teacher3@gmail.com', 'pass123', 'Teacher', 'teacher name', 0.03, 14, 5, 0
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE TABLE AND CONSTRAINTS FOR USER ENTITY */
CREATE TABLE USER_ENTITY (
  email VARCHAR(30) PRIMARY KEY NOT NULL,
  u_password VARCHAR(30) NOT NULL,
  u_role VARCHAR(10) NOT NULL CHECK (u_role IN ('Student', 'Teacher', 'Admin')),
  u_name VARCHAR(30) NOT NULL,
  user_image LONGBLOB,
  mimetype VARCHAR(50),
  filename VARCHAR(200),
  created_date DATE,
);

ALTER TABLE USER_ENTITY
ADD CONSTRAINT U_CREDENTIAL UNIQUE (email, u_password,u_role, u_name);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE TRIGGERS COVER INSERT - UPDATE - DELETE FOR USER ENTITY */
CREATE OR REPLACE TRIGGER USER_AFTER_INSERT
FOR INSERT ON USER_ENTITY 
COMPOUND TRIGGER 
    AFTER EACH ROW IS BEGIN
        IF :NEW.u_role = 'Student' THEN     
            INSERT INTO STUDENT_ENTITY (email, u_password, u_role, u_name, fine_rate, total_days) 
            VALUES (:NEW.email, :NEW.u_password, :NEW.u_role, :NEW.u_name, 0.02, 7);
        ELSIF :NEW.u_role = 'Teacher' THEN 
            INSERT INTO TEACHER_ENTITY (email, u_password, u_role, u_name, fine_rate, total_days) 
            VALUES (:NEW.email, :NEW.u_password, :NEW.u_role, :NEW.u_name, 0.03, 14);
        ELSIF :NEW.u_role = 'Admin' THEN 
            INSERT INTO ADMIN_ENTITY (email, u_password, u_role, u_name) 
            VALUES (:NEW.email, :NEW.u_password, :NEW.u_role, :NEW.u_name);
        END IF;
    END AFTER EACH ROW;
END USER_AFTER_INSERT;


CREATE OR REPLACE TRIGGER USER_AFTER_UPDATE
FOR UPDATE ON USER_ENTITY 
COMPOUND TRIGGER 
    admin_size INT := 0;
    student_size INT := 0;
    teacher_size INT := 0;
    is_mail_admin_exist INT :=  0;

    TYPE email_array_t IS TABLE OF USER_ENTITY.email%TYPE;
    email_array email_array_t := email_array_t();

    TYPE u_role_array_t IS TABLE OF USER_ENTITY.u_role%TYPE;
    u_role_array u_role_array_t := u_role_array_t();

    TYPE u_role_old_array_t IS TABLE OF USER_ENTITY.u_role%TYPE;
    u_role_old_array u_role_old_array_t := u_role_old_array_t();

    TYPE u_password_t IS TABLE OF USER_ENTITY.u_password%TYPE;
    u_password_array u_password_t := u_password_t();

    TYPE u_name_t IS TABLE OF USER_ENTITY.u_name%TYPE;
    u_name_array u_name_t := u_name_t();

    AFTER EACH ROW IS BEGIN
        email_array.extend();
        email_array(email_array.count) := :OLD.email;

        u_role_old_array.extend();
        u_role_old_array(u_role_old_array.count) := :OLD.u_role;

        u_role_array.extend();
        u_role_array(u_role_array.count) := :NEW.u_role;

        u_password_array.extend();
        u_password_array(u_password_array.count) := :NEW.u_password;

        u_name_array.extend();
        u_name_array(u_name_array.count) := :NEW.u_name;
    END AFTER EACH ROW;

    AFTER STATEMENT IS 
    BEGIN 
        FOR i IN 1..email_array.count LOOP 
            SELECT COUNT(email) INTO admin_size FROM ADMIN_ENTITY WHERE email = email_array(i);
            SELECT COUNT(email) INTO student_size FROM STUDENT_ENTITY WHERE email = email_array(i);
            SELECT COUNT(email) INTO teacher_size FROM TEACHER_ENTITY WHERE email = email_array(i);
            SELECT COUNT(email_array(i)) INTO is_mail_admin_exist  FROM ENTRY_RELATION WHERE email = email_array(i);
        
            IF u_role_array(i) = 'Student' AND student_size = 0 THEN 
                INSERT INTO STUDENT_ENTITY (email, u_password, u_role, u_name, fine_rate, total_days) 
                VALUES (email_array(i), u_password_array(i), u_role_array(i), u_name_array(i), 0.02, 7);

                UPDATE ENTRY_RELATION
                SET U_NAME = u_name_array(i), U_ROLE = u_role_array(i), FINE_RATE = 0.02, DEADLINE = ISSUE_DAY + 7
                WHERE email = email_array(i);

                DELETE FROM TEACHER_ENTITY
                WHERE TEACHER_ENTITY.email = email_array(i);

                DELETE FROM ADMIN_ENTITY
                WHERE ADMIN_ENTITY.email = email_array(i);
            ELSIF u_role_array(i) = 'Teacher' AND teacher_size = 0 THEN 
                INSERT INTO TEACHER_ENTITY (email, u_password, u_role, u_name, fine_rate, total_days) 
                VALUES (email_array(i), u_password_array(i), u_role_array(i), u_name_array(i), 0.03, 14);

                UPDATE ENTRY_RELATION
                SET U_NAME = u_name_array(i), U_ROLE = u_role_array(i), FINE_RATE = 0.03, DEADLINE = ISSUE_DAY + 14
                WHERE email = email_array(i);             

                DELETE FROM STUDENT_ENTITY
                WHERE STUDENT_ENTITY.email = email_array(i);

                DELETE FROM ADMIN_ENTITY
                WHERE ADMIN_ENTITY.email = email_array(i);
            ELSIF u_role_array(i) = 'Admin' AND admin_size = 0 THEN 
                IF is_mail_admin_exist != 0 THEN 
                    apex_error.add_error (
                    p_message          => 'User can be promoted to admin because there are entries include in this account.',
                    p_display_location => apex_error.c_inline_in_notification );
                END IF;

                INSERT INTO ADMIN_ENTITY (email, u_password, u_role, u_name) 
                VALUES (email_array(i), u_password_array(i), u_role_array(i), u_name_array(i));    

                DELETE FROM TEACHER_ENTITY
                WHERE TEACHER_ENTITY.email = email_array(i);

                DELETE FROM STUDENT_ENTITY
                WHERE STUDENT_ENTITY.email = email_array(i);                
            END IF;

            IF u_role_old_array(i) = 'Student' THEN 
                UPDATE STUDENT_ENTITY 
                SET U_NAME = u_name_array(i), U_ROLE = u_role_array(i), U_PASSWORD = u_password_array(i)
                WHERE STUDENT_ENTITY.email = email_array(i);
            ELSIF u_role_old_array(i) = 'Teacher' THEN 
                UPDATE TEACHER_ENTITY 
                SET U_NAME = u_name_array(i), U_ROLE = u_role_array(i), U_PASSWORD = u_password_array(i)
                WHERE TEACHER_ENTITY.email = email_array(i);
            ELSIF u_role_old_array(i) = 'Admin' THEN 
                UPDATE ADMIN_ENTITY 
                SET U_NAME = u_name_array(i), U_ROLE = u_role_array(i), U_PASSWORD = u_password_array(i)
                WHERE ADMIN_ENTITY.email = email_array(i);
            END IF;
                  
        END LOOP;
    END AFTER STATEMENT;
END USER_AFTER_UPDATE;


CREATE OR REPLACE TRIGGER USER_AFTER_DELETE
FOR DELETE ON USER_ENTITY 
COMPOUND TRIGGER 
    TYPE email_array_t IS TABLE OF USER_ENTITY.email%TYPE;
    email_array email_array_t := email_array_t();

    TYPE u_role_array_t IS TABLE OF USER_ENTITY.u_role%TYPE;
    u_role_array u_role_array_t := u_role_array_t();

    AFTER EACH ROW IS 
    BEGIN
        email_array.extend();
        email_array(email_array.count) := :OLD.email;

        u_role_array.extend();
        u_role_array(u_role_array.count) := :OLD.u_role;
    END AFTER EACH ROW;

    AFTER STATEMENT IS 
    BEGIN 
        FOR i IN 1..email_array.count LOOP 
            IF u_role_array(i) = 'Student' THEN 
                DELETE FROM STUDENT_ENTITY
                WHERE STUDENT_ENTITY.email = email_array(i);
            ELSIF u_role_array(i) = 'Teacher' THEN 
                DELETE FROM TEACHER_ENTITY
                WHERE TEACHER_ENTITY.email = email_array(i);
            ELSIF u_role_array(i) = 'Admin' THEN 
                DELETE FROM ADMIN_ENTITY
                WHERE ADMIN_ENTITY.email = email_array(i);
            END IF;
        END LOOP;
    END AFTER STATEMENT;
END USER_AFTER_DELETE;
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* POPULATE DATA FOR USER ENTITY */
INSERT INTO USER_ENTITY VALUES (
  'teacher@gmail.com',
  'pass123',
  'Teacher',
  'Teacher name',
  NULL,
  NULL,
  NULL,
  NULL
);
INSERT INTO USER_ENTITY VALUES (
  'student@gmail.com',
  'pass123',
  'Student',
  'Student name',
  NULL,
  NULL,
  NULL,
  NULL
);
INSERT INTO USER_ENTITY VALUES (
  'student2@gmail.com',
  'pass123',
  'Student',
  'Student name',
  NULL,
  NULL,
  NULL,
  NULL
);
INSERT INTO USER_ENTITY VALUES (
  'admin@gmail.com',
  'pass123', 
  'Admin',
  'Admin name',
  NULL,
  NULL,
  NULL,
  NULL
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE TABLE AND CONSTRAINTS FOR ENTRY RELATION */
CREATE TABLE ENTRY_RELATION (
  id INT GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,  
  email VARCHAR(30) NOT NULL ,
  book_ID INT NOT NULL,
  b_category VARCHAR(30)  NOT NULL CHECK (b_category IN ('FICTION', 'NON-FICTION', 'MYSTERY', 'ROMANCE', 
  'THRILLER')),
  u_name VARCHAR(30),
  u_role VARCHAR(10) NOT NULL CHECK (u_role IN ('Student', 'Teacher', 'Admin')),
  title VARCHAR(30),
  fine_rate DECIMAL(18, 2),
  issue_day DATE,
  accumulate_day DATE,
  current_fine DECIMAL(18, 2),
  deadline DATE,
  e_status VARCHAR(10) DEFAULT 'In Borrow',
  FOREIGN KEY (email) REFERENCES USER_ENTITY(email),
  FOREIGN KEY (book_ID) REFERENCES BOOK_ENTITY(ID),
  CHECK (u_role != 'ADMIN'),
  CHECK (current_fine <= 0),
  CONSTRAINT ENTRY_RELATION_CON CHECK (e_status IN ('In Borrow', 'Late'))
);

ALTER TABLE ENTRY_RELATION ADD (
  CONSTRAINT ENTRY_PK PRIMARY KEY (id)
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE TRIGGERS COVER INSERT - DELETE FOR ENTRY RELATION */
CREATE OR REPLACE TRIGGER ENTRY_AFTER_INSERT
FOR INSERT ON ENTRY_RELATION
COMPOUND TRIGGER
    TYPE u_role_t IS TABLE OF ENTRY_RELATION.u_role%TYPE;
    u_role_array u_role_t := u_role_t();

    TYPE email_t IS TABLE OF ENTRY_RELATION.email%TYPE;
    email_array email_t := email_t();

    TYPE title_t IS TABLE OF ENTRY_RELATION.title%TYPE;
    title_array title_t := title_t();

    TYPE book_id_t IS TABLE OF ENTRY_RELATION.title%TYPE;
    book_id_array book_id_t := book_id_t();

    TYPE entry_id_t IS TABLE OF ENTRY_RELATION.ID%TYPE;
    entry_id_array entry_id_t := entry_id_t();

    AFTER EACH ROW IS BEGIN
        u_role_array.extend();
        u_role_array(u_role_array.count) := :NEW.u_role;

        email_array.extend();
        email_array(email_array.count) := :NEW.email;

        title_array.extend();
        title_array(title_array.count) := :NEW.title;

        book_id_array.extend();
        book_id_array(book_id_array.count) := :NEW.book_id;

        entry_id_array.extend();
        entry_id_array(entry_id_array.count) := :NEW.ID;
    END AFTER EACH ROW;

    AFTER STATEMENT IS BEGIN 
        FOR i IN 1..email_array.count LOOP
            IF u_role_array(i) = 'Student' THEN 
                UPDATE ENTRY_RELATION 
                SET issue_day = SYSDATE + INTERVAL '7' HOUR, accumulate_day = SYSDATE + INTERVAL '7' HOUR  + 2, deadline = SYSDATE + INTERVAL '7' HOUR + 7, 
                    current_fine = 0, e_status = 'In Borrow'
                WHERE ENTRY_RELATION.email = email_array(i) AND ENTRY_RELATION.ID = entry_id_array(i);
            ELSIF u_role_array(i) = 'Teacher' THEN
                UPDATE ENTRY_RELATION 
                SET issue_day = SYSDATE + INTERVAL '7' HOUR, accumulate_day = SYSDATE + INTERVAL '7' HOUR  + 2, deadline =  SYSDATE 
                + INTERVAL '7' HOUR + 14, current_fine = 0, e_status = 'In Borrow'
                WHERE ENTRY_RELATION.email = email_array(i) AND ENTRY_RELATION.ID = entry_id_array(i);      
            END IF;

            UPDATE STOCK_ENTITY 
            SET num_stock =(SELECT COUNT(*) FROM BOOK_ENTITY WHERE title = title_array(i) AND b_status = 'Available')
            WHERE title = title_array(i);

            UPDATE BOOK_ENTITY 
            SET b_status = 'Unavailable'
            WHERE ID = book_id_array(i);

            DELETE FROM STOCK_ENTITY WHERE num_stock = 0;
        END LOOP;
    END AFTER STATEMENT;
END ENTRY_AFTER_INSERT;


CREATE OR REPLACE TRIGGER ENTRY_AFTER_DELETE
FOR DELETE ON ENTRY_RELATION
COMPOUND TRIGGER
    TYPE email_t IS TABLE OF ENTRY_RELATION.email%TYPE;
    email_array email_t := email_t();

    TYPE title_t IS TABLE OF ENTRY_RELATION.title%TYPE;
    title_array title_t := title_t();

    TYPE book_id_t IS TABLE OF ENTRY_RELATION.title%TYPE;
    book_id_array book_id_t := book_id_t();

    TYPE u_role_t IS TABLE OF ENTRY_RELATION.u_role%TYPE;
    u_role_array u_role_t := u_role_t();

    AFTER EACH ROW IS BEGIN
        email_array.extend();
        email_array(email_array.count) := :OLD.email;

        title_array.extend();
        title_array(title_array.count) := :OLD.title;

        book_id_array.extend();
        book_id_array(book_id_array.count) := :OLD.book_id;

        u_role_array.extend();
        u_role_array(u_role_array.count) := :OLD.u_role;
    END AFTER EACH ROW;

    AFTER STATEMENT IS BEGIN 
        FOR i IN 1..email_array.count LOOP
            UPDATE BOOK_ENTITY
            SET b_status = 'Available'
            WHERE BOOK_ENTITY.title = title_array(i) AND BOOK_ENTITY.ID = book_id_array(i);

            UPDATE STOCK_ENTITY
            SET num_stock = (SELECT COUNT(*) FROM BOOK_ENTITY WHERE title = title_array(i) AND b_status = 'Available')
            WHERE STOCK_ENTITY.title = title_array(i);

            if u_role_array(i) = 'Student' then
                UPDATE STUDENT_ENTITY
                SET total_issued = total_issued + 1
                WHERE STUDENT_ENTITY.email = email_array(i);
            elsif u_role_array(i) = 'Teacher' then
                UPDATE TEACHER_ENTITY
                SET total_issued = total_issued + 1
                WHERE TEACHER_ENTITY.email = email_array(i);
            end if;
            DELETE FROM STOCK_ENTITY WHERE num_stock = 0;
        END LOOP;
    END AFTER STATEMENT;
END ENTRY_AFTER_DELETE;
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 

/* POPULATE DATA FOR ENTRY RELATION */
INSERT INTO ENTRY_RELATION VALUES (
    NULL,
    'khang123@gmail.com',
    1,
    'FICTION',
    'Khang',
    'Student',
    'Book1',
    0.02,
    NULL,
    NULL,
    NULL,
    NULL
);
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE USER BOOK VIEW */
CREATE OR REPLACE VIEW USER_BOOK_VIEW (
    ENTRY_ID,
    EMAIL,
    BOOK_ID,
    TITLE,
    B_CATEGORY,
    BOOK_PICTURE,
    FILENAME,
    MIMETYPE,
    CURRENT_FINE,
    DEADLINE,
    ACCUMULATE_DAY
  ) AS
SELECT E.ID AS ENTRY_ID,
  E.EMAIL,
  B.ID AS BOOK_ID,
  B.TITLE,
  B.B_CATEGORY,
  B.BOOK_PICTURE,
  B.FILENAME,
  B.MIMETYPE,
  E.CURRENT_FINE,
  E.DEADLINE,
  E.ACCUMULATE_DAY
FROM ENTRY_RELATION E
  INNER JOIN BOOK_ENTITY B ON E.BOOK_ID = B.ID;
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 


/* CREATE USER RETURN BOOK VIEW */
CREATE OR REPLACE VIEW USER_RETURN_BOOK (
    EMAIL,
    U_PASSWORD,
    U_ROLE,
    U_NAME,
    FINE_RATE,
    TOTAL_DAYS,
    BOOK_LIMIT,
    TOTAL_ISSUED
  ) AS
SELECT EMAIL,
  U_PASSWORD,
  U_ROLE,
  U_NAME,
  FINE_RATE,
  TOTAL_DAYS,
  BOOK_LIMIT,
  TOTAL_ISSUED
FROM STUDENT_ENTITY
UNION
SELECT EMAIL,
  U_PASSWORD,
  U_ROLE,
  U_NAME,
  FINE_RATE,
  TOTAL_DAYS,
  BOOK_LIMIT,
  TOTAL_ISSUED
FROM TEACHER_ENTITY;
/* ═══════════════════════════════════════ END OF QUERY ═══════════════════════════════════════ */ 
